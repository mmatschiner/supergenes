# m_matschiner Thu Mar 8 14:44:30 CET 2018

# Define a function to sleep if too many jobs are queued or running.
function sleep_while_too_busy {
    n_jobs=`squeue -u michaelm | wc -l`
    while [ $n_jobs -gt 355 ]
    do
        sleep 10
        n_jobs=`squeue -u michaelm | wc -l`
    done
}

# Define a function to sleep while any jobs triggered by this script are queued or running.
function sleep_while_running {
    n_jobs=`squeue -u michaelm | grep wga | wc -l`
    while [ $n_jobs -gt 0 ]
    do
        sleep 10
        n_jobs=`squeue -u michaelm | grep wga | wc -l`
    done
}

# Define a function to print the time.
function print_time {
    END=$(date +%s)
    DIFF=$(( $END - $1 ))
    dd=$(echo "$DIFF/86400" | bc)
    dt2=$(echo "$DIFF-86400*$dd" | bc)
    dh=$(echo "$dt2/3600" | bc)
    dt3=$(echo "$dt2-3600*$dh" | bc)
    dm=$(echo "$dt3/60" | bc)
    ds=$(echo "$dt3-60*$dm" | bc)
    if [ $dd -gt 0 ]; then
        echo "done in ${dd} days and ${dh} hours."
    elif [ $dh -gt 0 ]; then
        echo "done in ${dh} hours and ${dm} minutes."
    elif [ $dm -gt 0 ]; then
        echo "done in ${dm} minutes and ${ds} seconds."
    else
        echo "done in ${ds} seconds."
    fi
}

# Make the log directory if it doesn't exist yet.
mkdir -p ../log/wga

# Make 2bit versions of the assemblies.
if [ ! -f ../data/assemblies/gadMor_Stat/gadMor_Stat.2bit ]
then
    START=$(date +%s)
    echo -n "Converting the gadMor_Stat assembly to 2bit format..."
    ../bin/kent/faToTwoBit ../data/assemblies/gadMor_Stat/gadMor_Stat.fasta ../data/assemblies/gadMor_Stat/gadMor_Stat.2bit
    print_time ${START}
fi
if [ ! -f ../data/assemblies/melAeg/melAeg.2bit ]
then
    START=$(date +%s)
    echo -n "Converting the melAeg assembly to 2bit format..."
    ../bin/kent/faToTwoBit ../data/assemblies/melAeg/melAeg.fasta ../data/assemblies/melAeg/melAeg.2bit
    print_time ${START}
fi
if [ ! -f ../data/assemblies/gadMor2/gadMor2.2bit ]
then
    START=$(date +%s)
    echo -n "Converting the gadMor2 assembly to 2bit format..."
    ../bin/kent/faToTwoBit ../data/assemblies/gadMor2/gadMor2.fasta ../data/assemblies/gadMor2/gadMor2.2bit
    print_time ${START}
fi


# Split the gadMor_Stat and melAeg assemblies into 30 similarly sized chunks of sequences.
if [ ! -f ../data/assemblies/gadMor_Stat/gadMor_Stat.mask.rm.01.fa ]
then
  START=$(date +%s)
  echo -n "Splitting the gadMor_Stat reference..."
  ../bin/kent/faSplit sequence ../data/assemblies/gadMor_Stat/gadMor_Stat.fasta.masked 30 ../data/assemblies/gadMor_Stat/gadMor_Statmasked
  for i in ../data/assemblies/gadMor_Stat/gadMor_Statmasked??.fa
  do
      new_file_name=`echo ${i} | sed 's/gadMor_Statmasked/gadMor_Stat.mask.rm./g'`
      mv ${i} ${new_file_name}
  done
  print_time ${START}
fi
if [ ! -f ../data/assemblies/melAeg/melAeg.mask.rm.01.fa ]
then
  START=$(date +%s)
  echo -n "Splitting the melAeg reference..."
  ../bin/kent/faSplit sequence ../data/assemblies/melAeg/melAeg.fasta.masked 30 ../data/assemblies/melAeg/melAegmasked
  for i in ../data/assemblies/melAeg/melAegmasked??.fa
  do
      new_file_name=`echo ${i} | sed 's/melAegmasked/melAeg.mask.rm./g'`
      mv ${i} ${new_file_name}
  done
  print_time ${START}
fi

# Mask tandem repeats.
START=$(date +%s)
count=0
for i in ../data/assemblies/{gadMor_Stat/gadMor_Stat,melAeg/melAeg}.mask.rm.??.fa ../data/assemblies/gadMor2/gadMor2_lg??.mask.rm.fasta
do
    tmp1=`basename ${i%.fasta}`
    tmp2=${tmp1%.fa}
    in_file_id=`echo ${tmp2} | sed 's/.mask.rm//g'`
    out="../log/wga/trf.${in_file_id}.out"
    new_file_name=`echo ${i} | sed 's/mask.rm/mask.trf/g'`
    rm -f ${out}
    if [ ! -f ${new_file_name} ]
    then
	    count=$((count+1))
	    echo -ne "\rSubmitting jobs to mask tandem repeats (${count})..."
	    sbatch -o ${out} run_trf.slurm ${i} ${new_file_name} > /dev/null
    fi
    sleep_while_too_busy
done
sleep_while_running
if [ ${count} -gt 0 ]
then
    echo ${count}
    print_time ${START}
fi

# Merge the assembly version in which tandem repeats are masked with the one generated by repeatmasker.
START=$(date +%s)
count=0
for i in ../data/assemblies/{gadMor_Stat/gadMor_Stat,melAeg/melAeg}.mask.rm.??.fa ../data/assemblies/gadMor2/gadMor2_lg??.mask.rm.fasta
do
    tmp1=`basename ${i%.fasta}`
    tmp2=${tmp1%.fa}
    in_file_id=`echo ${tmp2} | sed 's/.mask.rm//g'`
    out="../log/wga/merge_masks.${in_file_id}.out"
    new_file_name=`echo ${i} | sed 's/mask.rm/mask/g'`
    rm -f ${out}
    if [ ! -f ${new_file_name} ]
    then
	    count=$((count+1))
	    echo -ne "\rSubmitting jobs to merge masks (${count})..."
	    sbatch -o ${out} merge_assembly_masks.slurm ${i} > /dev/null
    fi
    sleep_while_too_busy
done
sleep_while_running
if [ ${count} -gt 0 ]
then
    echo ${count}
    print_time ${START}
fi

# Run lastz to generate files in lav format.
START=$(date +%s)
mkdir -p ../res/lastz/lav
count=0
for target in ../data/assemblies/gadMor2/gadMor2_lg??.mask.fasta
do
    target_id=`basename ${target%.mask.fasta} | sed 's/gadMor2_lg/n/g'`
    for query in ../data/assemblies/gadMor_Stat/gadMor_Stat.mask.??.fa ../data/assemblies/melAeg/melAeg.mask.??.fa
    do
	query_id=`basename ${query%.fa} | sed 's/.mask.//g' | sed 's/gadMor_Stat/c/g' | sed 's/melAeg/h/g'`
	lav_file="../res/lastz/lav/${target_id}_${query_id}.lav"
	if [ ! -f ${lav_file} ]
	then
	    count=$((count+1))
	    echo -ne "\rSubmitting jobs to run lastz (${count})..."
	    params="\"B=2 C=0 E=150 H=0 K=4500 L=3000 M=254 O=600 Q=../data/parameter_files/human_chimp.v2.q T=2 Y=15000\""
	    out="../log/wga/lastz.${target_id}_${query_id}.out"
	    rm -f ${out}
	    sbatch -o ${out} run_lastz.slurm ${target} ${query} ${params} ${lav_file} > /dev/null
	    sleep_while_too_busy
	fi
    done
done
sleep_while_running
if [ ${count} -gt 0 ]
then
    print_time ${START}
fi

# Convert lav files to psl format.
START=$(date +%s)
mkdir -p ../res/lastz/psl
count=0
for lav_file in ../res/lastz/lav/*.lav
do
    psl_file=`echo ${lav_file} | sed 's/lav/psl/g'`
    if [ ! -f ${psl_file} ]
    then
	    count=$((count+1))
	    file_id=`basename ${psl_file%.psl}`
	    echo -ne "\rSubmitting jobs to convert lav files (${count})..."
	    out="../log/wga/convert_lav.${file_id}.out"
	    rm -f ${out}
	    sbatch -o ${out} convert_lav.slurm ${lav_file} ${psl_file} > /dev/null
	    sleep_while_too_busy
    fi
done
if [ ${count} -gt 0 ]
then
    echo ${count}
    print_time ${START}
fi
sleep_while_running

# Chain alignments if they are close enough to each other.
START=$(date +%s)
mkdir -p ../res/lastz/chains
count=0
for psl_file in ../res/lastz/psl/n??_c??.psl
do
    file_id=`basename ${psl_file%.psl}`
    chain_file=../res/lastz/chains/${file_id}.chain
    if [ ! -f ${chain_file} ]
    then
	    count=$((count+1))
	    echo -ne "\rSubmitting jobs to chain psl files (${count})..."
	    out="../log/wga/make_chain.${file_id}.out"
	    rm -f ${out}
	    sbatch -o ${out} make_chain.slurm ${psl_file} ${chain_file} ../data/assemblies/gadMor2/gadMor2.2bit ../data/assemblies/gadMor_Stat/gadMor_Stat.2bit > /dev/null
	    sleep_while_too_busy
    fi
done
for psl_file in ../res/lastz/psl/n??_h??.psl
do
    file_id=`basename ${psl_file%.psl}`
    chain_file=../res/lastz/chains/${file_id}.chain
    if [ ! -f ${chain_file} ]
    then
        count=$((count+1))
        echo -ne "\rSubmitting jobs to chain psl files (${count})..."
        out="../log/wga/make_chain.${file_id}.out"
        rm -f ${out}
        sbatch -o ${out} make_chain.slurm ${psl_file} ${chain_file} ../data/assemblies/gadMor2/gadMor2.2bit ../data/assemblies/melAeg/melAeg.2bit > /dev/null
        sleep_while_too_busy
    fi
done
if [ ${count} -gt 0 ]
then
    print_time ${START}
fi
sleep_while_running

# Merge the chains.
home=`pwd`
cd ../res/lastz/chains
merged_chain_file_name="n_c.chain"
if [ ! -f ${merged_chain_file_name} ]
then
    START=$(date +%s)
    echo -n "Merging chains for the gadMor_Stat assembly... "
    out="../log/wga/merg_chain.c.out"
    ${home}/../bin/kent/chainMergeSort n??_c??.chain > ${merged_chain_file_name} 2>${home}/${out}
    print_time ${START}
fi
merged_chain_file_name="n_h.chain"
if [ ! -f ${merged_chain_file_name} ]
then
    START=$(date +%s)
    echo -n "Merging chains for the melAeg assembly... "
    out="../log/wga/merg_chain.h.out"
    ${home}/../bin/kent/chainMergeSort n??_h??.chain > ${merged_chain_file_name} 2> ${home}/${out}
    print_time ${START}
fi
cd ${home}

# Get the linkage-group sizes of all assemblies.
for assembly_file_name in ../data/assemblies/gadMor_Stat/gadMor_Stat.fasta ../data/assemblies/melAeg/melAeg.fasta ../data/assemblies/gadMor2/gadMor2.fasta
do
    sizes_file_name=${assembly_file_name%.fasta}.sizes
    if [ ! -f ${sizes_file_name} ]
    then
	    START=$(date +%s)
	    echo -n "Generating sizes file for assembly ${assembly_file_name}... "
	    ../bin/kent/faSize ${assembly_file_name} -detailed > ${sizes_file_name}
	    print_time ${START}
    fi
done

# Netting chains for gadMor_Stat.
mkdir -p ../res/lastz/nets
chain_file_name="../res/lastz/chains/n_c.chain"
prenet_chain_file_name="../res/lastz/chains/preNet_n_c.chain"
net_file_name="../res/lastz/nets/n_c_ms1.net"
wrong_net_file_name=${net_file_name}_wrong
synteny_file_name=${net_file_name%.net}_synteny.net
wrong_synteny_file_name=${synteny_file_name}_wrong
if [ ! -f ${synteny_file_name} ]
then
    echo -n "Netting file ${chain_file_name}... "
    START=$(date +%s)
    ../bin/kent/chainPreNet ${chain_file_name} ../data/assemblies/gadMor2/gadMor2.sizes ../data/assemblies/gadMor_Stat/gadMor_Stat.sizes ${prenet_chain_file_name}
    ../bin/kent/chainNet -minSpace=1 ${prenet_chain_file_name} ../data/assemblies/gadMor2/gadMor2.sizes ../data/assemblies/gadMor_Stat/gadMor_Stat.sizes ${net_file_name} ${wrong_net_file_name}
    ../bin/kent/netSyntenic ${net_file_name} ${synteny_file_name}
    ../bin/kent/netSyntenic ${wrong_net_file_name} ${wrong_synteny_file_name}
    print_time ${START}
fi

# Converting to axt and maf format for gadMor_Stat.
mkdir -p ../res/lastz/pairwise_alignments
axt_file_name="../res/lastz/pairwise_alignments/n_c_ms1.axt"
sorted_axt_file_name=${axt_file_name%.axt}_sorted.axt
maf_file_name=${sorted_axt_file_name%.axt}.maf
if [ ! -f ${maf_file_name} ]
then
    echo -n "Converting gadMor_Stat nets to axt and maf format... "
    START=$(date +%s)
    ../bin/kent/netToAxt ${synteny_file_name} ${prenet_chain_file_name} ../data/assemblies/gadMor2/gadMor2.2bit ../data/assemblies/gadMor_Stat/gadMor_Stat.2bit ${axt_file_name}
    ../bin/kent/axtSort ${axt_file_name} ${sorted_axt_file_name}
    ../bin/kent/axtToMaf ${sorted_axt_file_name} ../data/assemblies/gadMor2/gadMor2.sizes ../data/assemblies/gadMor_Stat/gadMor_Stat.sizes ${maf_file_name} -tPrefix="n" -qPrefix="c"
    print_time ${START}
fi

# Netting chains for melAeg.
chain_file_name="../res/lastz/chains/n_h.chain"
prenet_chain_file_name="../res/lastz/chains/preNet_n_h.chain"
net_file_name="../res/lastz/nets/n_h_ms1.net"
wrong_net_file_name=${net_file_name}_wrong
synteny_file_name=${net_file_name%.net}_synteny.net
wrong_synteny_file_name=${synteny_file_name}_wrong
if [ ! -f ${synteny_file_name} ]
then
    echo -n "Netting file ${chain_file_name}... "
    START=$(date +%s)
    ../bin/kent/chainPreNet ${chain_file_name} ../data/assemblies/gadMor2/gadMor2.sizes ../data/assemblies/melAeg/melAeg.sizes ${prenet_chain_file_name}
    ../bin/kent/chainNet -minSpace=1 ${prenet_chain_file_name} ../data/assemblies/gadMor2/gadMor2.sizes ../data/assemblies/melAeg/melAeg.sizes ${net_file_name} ${wrong_net_file_name}
    ../bin/kent/netSyntenic ${net_file_name} ${synteny_file_name}
    ../bin/kent/netSyntenic ${wrong_net_file_name} ${wrong_synteny_file_name}
    print_time ${START}
fi

# Converting to axt and maf format for melAeg.
mkdir -p ../res/lastz/pairwise_alignments
axt_file_name="../res/lastz/pairwise_alignments/n_h_ms1.axt"
sorted_axt_file_name=${axt_file_name%.axt}_sorted.axt
maf_file_name=${sorted_axt_file_name%.axt}.maf
if [ ! -f ${maf_file_name} ]
then
    echo -n "Converting melAeg nets to axt and maf format... "
    START=$(date +%s)
    ../bin/kent/netToAxt ${synteny_file_name} ${prenet_chain_file_name} ../data/assemblies/gadMor2/gadMor2.2bit ../data/assemblies/melAeg/melAeg.2bit ${axt_file_name}
    ../bin/kent/axtSort ${axt_file_name} ${sorted_axt_file_name}
    ../bin/kent/axtToMaf ${sorted_axt_file_name} ../data/assemblies/gadMor2/gadMor2.sizes ../data/assemblies/melAeg/melAeg.sizes ${maf_file_name} -tPrefix="n" -qPrefix="h"
    print_time ${START}
fi
